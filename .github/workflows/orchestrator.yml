name: Terraform Orchestrator

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      envs:
        description: "Environments to deploy (comma-separated: dev,uat,prod etc.)"
        required: false
        default: "dev"
jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extractMatrix.outputs.matrix }}
      firstEnv: ${{ steps.extractEnvs.outputs.env}}
      remainingEnvs: ${{ steps.extractEnvs.outputs.remaining_envs}}
    steps:
      - uses: actions/checkout@v4

      - name: Generate all tfvars
        run: python3 scripts/generate_tfvars.py

      - name: Upload tfvars
        uses: actions/upload-artifact@v3
        with:
          name: tfvars
          path: envs/*.tfvars.json

      - name: Extract matrix from envs.json for plan
        if: github.event_name == 'pull_request'
        id: extractMatrix
        run: |
          MATRIX=$(jq -c '[.[] | {name: .name, needs: .needs // null}]' configuration/envs.json)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: Extract first and remaining
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        id: extractEnvs
        run: |
          result=$(jq -c '
            (map(.name)) as $names
            | {env: $names[0], remaining_envs: $names[1:]}
          ' configuration/envs.json)
          echo "env=$(echo "$result" | jq -r '.env')" >> $GITHUB_OUTPUT
          echo "remaining_envs=$(echo "$result" | jq -c '.remaining_envs')" >> $GITHUB_OUTPUT

  plan:
    name: Terraform Plan (on PR)
    if: github.event_name == 'pull_request'
    needs: generate
    uses: ./.github/workflows/tf-plan.yml
    with:
      matrix: ${{ needs.generate.outputs.matrix }}
    secrets: inherit

  deploy:
    name: Start chain
    runs-on: ubuntu-latest
    needs: generate
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Start chain
        run: |
          gh workflow run tf_apply.yml \
            --ref "${{ github.ref_name }}" \
            -f env=${{ needs.generate.outputs.firstEnv }} \
            -f remainingEnvs='${{ needs.generate.outputs.remainingEnvs }}'
